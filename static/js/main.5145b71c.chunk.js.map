{"version":3,"sources":["logo.svg","headerStyle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","randColor","String","Math","floor","random","toString","App","className","id","style","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","Array","from","getElementsByClassName","forEach","letter","addEventListener","e","classList","add","remove","colors","oi","setAttribute","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,gGCoBxBC,MALlB,WAEG,OAAOC,OAAO,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,M,WCmCnDC,MA9Cf,WACE,OACE,yBAAKC,UAAU,OAIf,yBAAKC,GAAG,SACV,4BAAQD,UAAU,SAASE,MAAO,CAACC,MAAO,SAA1C,SACA,4BAAQH,UAAU,QAAlB,aACA,4BAAQA,UAAU,SAAlB,YAEF,yBAAKC,GAAG,WACR,yBAAKA,GAAG,QACN,0BAAMD,UAAU,QAEhB,0BAAMC,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,MAEA,0BAAMO,UAAU,QACd,0BAAMC,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,IAAID,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA9C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,KACA,0BAAMQ,GAAG,KAAKD,UAAU,SAASE,MAAO,CAACC,MAAMV,MAA/C,OAMJ,sDACA,8CCjCoBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAG1BC,MAAMC,KAAKH,SAASI,uBAAuB,WAAWC,SAAQ,SAAAC,GAC5DA,EAAOC,iBAAiB,aAAa,SAACC,GACpCF,EAAOG,UAAUC,IAAI,WACrBJ,EAAOG,UAAUC,IAAI,WAGvBJ,EAAOC,iBAAiB,gBAAgB,SAACC,GACvCF,EAAOG,UAAUE,OAAO,WACxBL,EAAOG,UAAUC,IAAI,cAIzB,IAAIE,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,kBAAmB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAEhL,SAAS/B,IACP,IAAIgC,EAAK9B,KAAKC,MAAsB,EAAhBD,KAAKE,UACzB,OAAO2B,EAAOC,GAIhBb,SAASC,eAAe,KAAKa,aAAa,QAAQjC,GAClDmB,SAASC,eAAe,KAAKa,aAAa,QAAQjC,GDgG5C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5145b71c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './index.css'\r\n\r\n\r\n\r\n/* function randColor(){\r\n\r\n  var colors = [\"#739600\", \"#1F5EA8\", \"#F72C2C\", \"#FA5021\", \"#FB9F54\", \"#FFAD00,#FFEB3B\", \"#55C934\", \"#4CAF58\", \"#1FA895\", \"#1FD2DB\", \"#2196F3\", \"#61338F\", \"#8F3378\", \"#E91E63\", \"#B32E37\"];\r\n  var oi = Math.floor(Math.random() * 8)\r\n  var x = document.getElementById('1'); \r\n            x.style.color = oi; \r\n  } \r\n  */\r\n\r\n\r\n function randColor(){\r\n\r\n    return String(\"#\"+Math.floor(Math.random()*16777215).toString(16));\r\n    } \r\n\r\n    export default randColor; \r\n  ","import React from 'react';\nimport Rand from './headerStyle'\nimport logo from './logo.svg';\nimport './App.css';\nimport randColor from './headerStyle';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n    {/*name info*/}\n\n    <div id=\"links\">\n  <button className=\"purple\" style={{color: \"blue\"}}>About</button>\n  <button className=\"blue\">Portfolio</button>\n  <button className=\"green\">Contact</button>\n</div>\n<div id=\"content\">\n<div id=\"name\">\n  <span className=\"logo\">\n    {/*<span id=\"1\" className=\"letter\" classNameName=\"hovered\">D</span>*/}\n  <span id=\"1\" className=\"letter\" style={{color:randColor()}} >D</span>\n  <span id=\"2\" className=\"letter\" style={{color:randColor()}} >a</span>\n  <span id=\"3\" className=\"letter\" style={{color:randColor()}} >v</span>\n  <span id=\"4\" className=\"letter\" style={{color:randColor()}} >i</span>\n  <span id=\"5\" className=\"letter\" style={{color:randColor()}} >d</span>\n  </span>\n  <span className=\"logo\">\n    <span id=\"6\" className=\"letter\" style={{color:randColor()}} >M</span>\n    <span id=\"7\" className=\"letter\" style={{color:randColor()}} >i</span>\n    <span id=\"8\" className=\"letter\" style={{color:randColor()}} >c</span>\n    <span id=\"9\" className=\"letter\" style={{color:randColor()}} >k</span>\n    <span id=\"10\" className=\"letter\" style={{color:randColor()}} >e</span>\n    <span id=\"11\" className=\"letter\" style={{color:randColor()}} >v</span>\n    <span id=\"12\" className=\"letter\" style={{color:randColor()}} >i</span>\n    <span id=\"13\" className=\"letter\" style={{color:randColor()}} >c</span>\n    <span id=\"14\" className=\"letter\" style={{color:randColor()}} >i</span>\n    <span id=\"15\" className=\"letter\" style={{color:randColor()}} >u</span>\n    <span id=\"16\" className=\"letter\" style={{color:randColor()}} >s</span>\n    \n  </span>\n</div>\n\n\n<p>My desire is to create.</p>\n<p>Hocus Pocus.</p>\n</div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from 'jquery'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nArray.from(document.getElementsByClassName('letter')).forEach(letter => {\n  letter.addEventListener(\"mouseover\", (e) => {\n    letter.classList.add(\"hovered\")\n    letter.classList.add(\"test\")\n\n  })\n  letter.addEventListener(\"animationend\", (e) => {\n    letter.classList.remove(\"hovered\")\n    letter.classList.add(\"test\")\n  })\n})\n\nvar colors = [\"#739600\", \"#1F5EA8\", \"#F72C2C\", \"#FA5021\", \"#FB9F54\", \"#FFAD00,#FFEB3B\", \"#55C934\", \"#4CAF58\", \"#1FA895\", \"#1FD2DB\", \"#2196F3\", \"#61338F\", \"#8F3378\", \"#E91E63\", \"#B32E37\"];\n\nfunction randColor() {\n  var oi = Math.floor(Math.random() * 8)\n  return colors[oi]   // The function returns a random color\n}\n\n\ndocument.getElementById('1').setAttribute(\"color\",randColor);\ndocument.getElementById('1').setAttribute(\"color\",randColor);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}